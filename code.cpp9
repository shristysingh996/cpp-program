#include <iostream>
using namespace std;

// Node structure using template
template <typename T>
struct Node {
    T data;
    Node<T>* next;
};

// LinkedList class template
template <typename T>
class LinkedList {
private:
    Node<T>* head;

public:
    LinkedList() : head(nullptr) {}

    // Insert at end
    void insert(T value) {
        Node<T>* newNode = new Node<T>{value, nullptr};
        if (!head) {
            head = newNode;
        } else {
            Node<T>* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Delete first occurrence of value
    void remove(T value) {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }

        if (head->data == value) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
            cout << "Deleted: " << value << endl;
            return;
        }

        Node<T>* current = head;
        while (current->next && current->next->data != value) {
            current = current->next;
        }

        if (current->next) {
            Node<T>* temp = current->next;
            current->next = temp->next;
            delete temp;
            cout << "Deleted: " << value << endl;
        } else {
            cout << "Value not found.\n";
        }
    }

    // Display all nodes
    void display() const {
        Node<T>* temp = head;
        if (!temp) {
            cout << "List is empty.\n";
            return;
        }
        cout << "LinkedList elements: ";
        while (temp) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }

    // Destructor to free memory
    ~LinkedList() {
        Node<T>* current = head;
        while (current) {
            Node<T>* next = current->next;
            delete current;
            current = next;
        }
    }
};
