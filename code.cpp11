#include <iostream>
using namespace std;

// Node structure template
template <typename T>
struct Node {
    T data;
    Node<T>* next;
};

// Queue class template
template <typename T>
class Queue {
private:
    Node<T>* front;
    Node<T>* rear;

public:
    Queue() : front(nullptr), rear(nullptr) {}

    // Enqueue operation
    void enqueue(T value) {
        Node<T>* newNode = new Node<T>{value, nullptr};
        if (!rear) {
            front = rear = newNode;
        } else {
            rear->next = newNode;
            rear = newNode;
        }
    }

    // Dequeue operation
    void dequeue() {
        if (!front) {
            cout << "Queue Underflow (empty queue).\n";
            return;
        }
        Node<T>* temp = front;
        front = front->next;
        if (!front)
            rear = nullptr;
        cout << "Dequeued: " << temp->data << endl;
        delete temp;
    }

    // Display the queue
    void display() const {
        if (!front) {
            cout << "Queue is empty.\n";
            return;
        }
        Node<T>* temp = front;
        cout << "Queue elements: ";
        while (temp) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }

    // Destructor to free memory
    ~Queue() {
        while (front)
            dequeue();
    }
};
